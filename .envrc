#!/usr/bin/env bash
# This file is both used via direnv, as well as by directly sourcing it in a
# shell (when being run from CI).

if type source_up >/dev/null 2>/dev/null; then
    # Using direnv; load any higher up .envrc
    source_up || true
else
    # (**)
    PWD="$(unset CDPATH ; cd "$(dirname "${BASH_SOURCE[0]:-${KSH_VERSION:+${.sh.file}}${KSH_VERSION:-$0}}")" && pwd)"
fi
export FISSILE_GIT_ROOT=$PWD

# Get version information
. "${PWD}/bin/common/versions.sh"

# The Docker repository name used for images, the registry itself, and the org to use.
# Note, this replaces "make/include/registry" and its IMAGE_* variables
export FISSILE_REPOSITORY=${FISSILE_REPOSITORY:-scf}
export FISSILE_DOCKER_REGISTRY="${FISSILE_DOCKER_REGISTRY:+${FISSILE_DOCKER_REGISTRY%/}/}"
export FISSILE_DOCKER_ORGANIZATION=${FISSILE_DOCKER_ORGANIZATION:-'splatform'}

# This is a comma separated list of paths to the local repositories
# of all the releases that make up SCF
FISSILE_RELEASE=""
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/consul-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/diego-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/garden-runc-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/groot-btrfs/groot-btrfs-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-mysql-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-smoke-tests-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-usb/cf-usb-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cflinuxfs2-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-opensuse42-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-sle12-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/cf-syslog-drain-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/routing-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/scf-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/scf-helper-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/capi-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/loggregator-agent-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/loggregator-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/nats-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/nfs-volume-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/postgres-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/statsd-injector-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/app-autoscaler-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/binary-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/dotnet-core-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/go-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/java-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/nodejs-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/php-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/python-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/ruby-buildpack-release"
FISSILE_RELEASE="${FISSILE_RELEASE},${PWD}/src/buildpacks/staticfile-buildpack-release"

export FISSILE_RELEASE="${FISSILE_RELEASE#,}"

# Path to an SCF role manifest
export FISSILE_ROLE_MANIFEST="${PWD}/container-host-files/etc/scf/config/role-manifest.yml"

# Path to a BOSH deployment manifest that contains light opinions
export FISSILE_LIGHT_OPINIONS="${PWD}/container-host-files/etc/scf/config/opinions.yml"

# Path to a BOSH deployment manifest that contains dark opinions
export FISSILE_DARK_OPINIONS="${PWD}/container-host-files/etc/scf/config/dark-opinions.yml"

# Path to a location where all fissile output is stored
# This will be ~/.fissile in vagrant
export FISSILE_WORK_DIR="${FISSILE_WORK_DIR:-${PWD}/output/fissile}"

# This is the location of the local BOSH cache
# You shouldn't need to override this
# This will be ~/.bosh/cache in vagrant
export FISSILE_CACHE_DIR="${FISSILE_CACHE_DIR:-${PWD}/output/bosh-cache}"

# Metrics for the build
export FISSILE_METRICS="${FISSILE_GIT_ROOT}/scf_metrics.csv"

# Path to fissile binary (not actually used by fissile)
export FISSILE_BINARY="${FISSILE_BINARY:-${PWD}/output/bin/fissile}"
mkdir -p "$(dirname "${FISSILE_BINARY}")"
PATH="$(dirname "${FISSILE_BINARY}")${PATH:+:${PATH}}"
export PATH

# This is the configuration base prefix
export FISSILE_CONFIG_PREFIX=scf

# We will persist compilation results to the VM here
# Caching is disabled if SCF_DISABLE_PACKAGE_COMPILATION_CACHE is set
if [ -z ${SCF_DISABLE_PACKAGE_COMPILATION_CACHE+x} ]; then
  export SCF_PACKAGE_COMPILATION_CACHE="${SCF_PACKAGE_COMPILATION_CACHE:-${PWD}/.fissile/compilation}"
else
  export SCF_PACKAGE_COMPILATION_CACHE=""
fi

# The following is for fish support: run this script as `bash $0 fish`, and it
# will print out the fish commands for you to source.
if test "${BASH_ARGV:+${BASH_ARGV[0]}}" = "fish" ; then
    for var in $(env | grep -E '^(FISSILE_|SCF_)' | cut -d= -f1) ; do
        echo "set -x ${var} '${!var}'"
    done
fi

if ! type source_up >/dev/null 2>/dev/null; then
    # Restore the variable from the start of the script
    PWD="$(pwd)"
fi

# Base OS for stemcell and stack
export USE_SLE_BASE=${USE_SLE_BASE:-false}

# The fissile stemcell image that is used as the base
if [ "${USE_SLE_BASE}" = "false" ]
then
    export FISSILE_STEMCELL=${FISSILE_STEMCELL:-${FISSILE_DOCKER_REGISTRY}${FISSILE_DOCKER_ORGANIZATION}/fissile-stemcell-opensuse:$FISSILE_STEMCELL_VERSION}
else
    export FISSILE_STEMCELL=${FISSILE_STEMCELL:-${FISSILE_DOCKER_REGISTRY}${FISSILE_DOCKER_ORGANIZATION}/fissile-stemcell-sle12:$FISSILE_STEMCELL_VERSION}
fi

# fissile build kube|helm (output, env)
# The defaults are all for helm.
# The make/kube script performs overrides for kube output.
export FISSILE_AUTH_TYPE=rbac
export FISSILE_OUTPUT_DIR="${FISSILE_OUTPUT_DIR:-${PWD}/output/helm}"
export FISSILE_DEFAULTS_FILE=
