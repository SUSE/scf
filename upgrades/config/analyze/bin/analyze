#!/usr/bin/env ruby 
# -*- ruby-mode -*-

require 'optparse'
require 'json'

$:.push(File.expand_path(File.join(File.dirname(File.dirname(__FILE__)), "lib")))
require 'differ/compare'
include Differ::Compare

# upgrades/config/analyze: generate JSON hashes to show how configs change
# from one run to the other
# 
# Sample commands for generating config diffs
# Diff opinions:
# bin/analyze -o /home/ericp/git/hpcloud/hcf-infrastructure/config-opinions/cf-v217 spec/fixtures/cf-v222
# Diff job specs:
# bin/analyze  -j ~/disk1/hpcloud/cf-release-217 -k ~/disk1/hpcloud/cf-release-222
# Diff user-settings from two different terraform hcf builds:
# bin/analyze -t spec/fixtures/hcf-cf-v217 -u spec/fixtures/hcf-cf-v222  -v overrides.tfvars template_file.domain.rendered=1.2.3.4.xip.io
#
# the options can be combined to generate a combined hash.
#
# The options are somewhat mnemonic:
# -o: opinion-dir:: -o=--old opinion-dir, -p==--new-opinion-dir ('o' comes before 'p')
# -j: jobs-dir::    -j=--old jobs-dir, -k==--new-jobs-dir ('j' comes before 'k')
# -t: tf-dir::      -t=--old tf-dir, -u==--new tf-dir
# -v: override.tfvars: common ov file (could be full path or basename in tf dir)
# Just specify -v if both the old and new terraform dirs use the same override file.
# Assume no dir uses more than one tfvars file.
# -w: old ov file
# -x: new ov file

opts = OptionParser.new
o = {}
opts.on("-o", "--old-opinion-dir DIR", String) {|x| o[:old_opinion_dir]=x }
opts.on("-p", "--new-opinion-dir DIR", String) {|x| o[:new_opinion_dir]=x }
opts.on("-j", "--old-jobs-dir DIR", String) {|x| o[:old_jobs_dir]=x }
opts.on("-k", "--new-jobs-dir DIR", String) {|x| o[:new_jobs_dir]=x }
opts.on("-t", "--old-terraform-dir DIR", String) {|x| o[:old_terraform_dir]=x }
opts.on("-u", "--new-terraform-dir DIR", String) {|x| o[:new_terraform_dir]=x }
opts.on("-v", "--common-overrides-file FILE", String) {|x| o[:common_overrides_file]=x }
opts.on("-w", "--old-overrides-file FILE", String) {|x| o[:old_overrides_file]=x }
opts.on("-x", "--new-overrides-file FILE", String) {|x| o[:new_overrides_file]=x }
opts.on("-V", "--verbose") {|x| o[:verbose]=true }
rest = opts.parse(*ARGV)

$opts = opts
def usage(msg)
  $stderr.puts("#{$0}: #{msg}: #{$opts}")
  exit(1)
end

pvars = {}
rest.each do |s|
  p = s.split('=', 2)
  if p.size == 1
    usage("Other args should be name=value")
  end
  pvars[p[0]] = p[1]
end

did_something = false
results = {add:[], drop:[], change:[]}
if !!o[:old_opinion_dir] != !!o[:new_opinion_dir]
  usage("need to specify both --old-opinion-dir and --new-opinion-dir")
end
if !!o[:old_jobs_dir] != !!o[:new_jobs_dir]
  usage("need to specify both --old-jobs-dir and --new-jobs-dir")
end
if !!o[:old_terraform_dir] != !!o[:new_terraform_dir]
  usage("need to specify both --old-terraform-dir and --new-terraform-dir")
end
if !o[:old_opinion_dir] && !o[:old_jobs_dir] && !o[:old_terraform_dir]
  usage("Warning: no tranformations specified")
end
results = {add:[], drop:[], change:[]}
if o[:old_opinion_dir]
  old_dir = o[:old_opinion_dir]
  new_dir = o[:new_opinion_dir]
  new_results = compare_dirs(old_dir, new_dir, "opinions.yml", "hcf/opinions", o[:verbose])
  merge_results(results, new_results)
  new_results = compare_dirs(old_dir, new_dir, "dark-opinions.yml", "hcf/user", o[:verbose])
  merge_results(results, new_results)
end
if o[:old_jobs_dir]
  new_results = compare_cf_specs(o[:old_jobs_dir], o[:new_jobs_dir], o[:verbose])
  merge_results(results, new_results)
end
if o[:old_terraform_dir]
  old_ov = o[:old_overrides_file] && o[:common_overrides_file]
  new_ov = o[:new_overrides_file] && o[:common_overrides_file]
  old_configs = get_configs(o[:old_terraform_dir], old_ov, pvars)
  new_configs = get_configs(o[:new_terraform_dir], new_ov, pvars)
  new_results = compare_configs(old_configs, new_configs, o[:verbose])
  #merge_results(results, new_results)
  results = new_results
end
puts JSON.dump(results)


