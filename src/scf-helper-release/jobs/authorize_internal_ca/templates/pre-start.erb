#!/bin/bash -e

# This installs certificate authorities:
# - if available, the internal CA used to identify the components in the cluster
# - if available, the CA used for UAA

# This file is (sometimes) sourced as an environment script, as it is required by
# `fetch_uaa_verification_key.sh`, which itself must be an enviroment script.
# As such, we need to do things to ensure we have an acceptable environment.

centos_file=$chroot/etc/centos-release
rhel_file=$chroot/etc/redhat-release
ubuntu_file=$chroot/etc/lsb-release
photonos_file=$chroot/etc/photon-release
opensuse_file=$chroot/etc/SuSE-release

os_type=''
if [ -f $photonos_file ]
then
    os_type='photonos'
elif [ -f $ubuntu_file ]
then
    os_type='ubuntu'
elif [ -f $centos_file ]
then
    os_type='centos'
elif [ -f $rhel_file ]
then
    os_type='rhel'
elif [ -f $opensuse_file ]
then
    os_type='opensuse'
fi

if [ "$os_type" == "ubuntu" ]; then
    ca_path=/usr/local/share/ca-certificates
elif [ "$os_type" == "opensuse" ]; then
    ca_path=/etc/pki/trust/anchors
else
    printf "Error: unknown operating system '${os_type}'"
    exit 1
fi

if test -z "${BASH_SOURCE[1]:-}" ; then
    # This is being run standalone
    set -o errexit -o nounset
else
    # This is being sourced from a different script
    if ! ( echo "${SHELLOPTS:-}" | tr ':' '\n' | grep --quiet errexit ) ; then
        printf "Error: errexit not set\n" >&2
        exit 1
    fi
fi

if [ -r /etc/secrets/internal-ca-cert ]; then
    cp /etc/secrets/internal-ca-cert "${ca_path}"/internalCA.crt
elif [ -n "${INTERNAL_CA_CERT:-}" ]; then
    printf "%b" "${INTERNAL_CA_CERT}" > "${ca_path}"/internalCA.crt
fi

printf "%b" "<%= p("uaa.ca_cert") %>" > "${ca_path}"/uaa-ca-cert.crt

update-ca-certificates
