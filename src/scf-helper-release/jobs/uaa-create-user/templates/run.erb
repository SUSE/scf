#!/bin/bash
# This script creates the initial user in HCP in the UAA zone if we are using
# one. This does not apply when we're using the default UAA zone (in which case
# we do it via properties.uaa.scim.users)
# We should only be in the default zone in Vagrant.  SCF deployed on CAASP
# should always end up in the instance-specific zone.

set -o errexit -o nounset

# Default: verbose operation. Uncomment 2nd line to quiet this job
SILENT=
#SILENT=--silent

<% if properties.uaa.scim.users.empty? %>
     echo "Aborting. No admin user configured."
     exit 1
<% end %>
<% if properties.uaa.scim.users.length > 1 %>
     echo "Aborting. Configured more than one admin user: (<%= userinfo %>)"
     exit 1
<% end %>

# Report progress to the user; use as printf
status() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;32m" "$@" "\033[0m"
}

# Report problem to the user; use as printf
trouble() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;31m" "$@" "\033[0m"
}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        printf "Trying: %s\n" "$*"
        if "$@" ; then
            status ' SUCCESS'
            break
        fi
        trouble '  FAILED'
        status "Waiting ${delay} ..."
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

export PATH="/var/vcap/packages/ruby-2.3/bin:/var/vcap/packages/cf-uaac/bin:${PATH}"
export GEM_HOME=/var/vcap/packages/cf-uaac/vendor/bundle/ruby/2.3.0/

<%
curl_ssl = properties.ssl.skip_cert_verify ? '--insecure' : ''
uaac_ssl = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
%>

# Running in vagrant, and managing our own UAA
# We need to create the zone and populate it

UAA_ZONE_ID="${KUBERNETES_NAMESPACE:-scf}"

status "Waiting for root UAA to be available..."
retry 240 30s curl ${SILENT} --connect-timeout 5 --fail <%= curl_ssl %> --header 'Accept: application/json' '<%= p("scf.uaa.root-zone.url") %>/info'

# We need to create the zone manually
status "Checking for UAA zone ${UAA_ZONE_ID}..."

uaac target <%= uaac_ssl %> '<%= p("scf.uaa.root-zone.url") %>'
uaac token client get default_zone_admin --secret '<%= p("uaa.admin.client_secret") %>'

if uaac curl <%= curl_ssl %> "/identity-zones/${UAA_ZONE_ID}" | grep --quiet '404' ; then
    status "Creating UAA zone ${UAA_ZONE_ID}"
    uaac curl <%= curl_ssl %> -X POST /identity-zones -H 'Content-Type: application/json' -d '{
        "id": "'"${UAA_ZONE_ID}"'",
        "subdomain": "'"${UAA_ZONE_ID}"'",
        "name": "'"${UAA_ZONE_ID}"'",
        "config": {
          "userConfig": {
            "defaultGroups": <%= p("uaa.user.default_groups").to_json %>
          }
        }
    }'
fi

status "Creating groups..."
<% p('uaa.user.authorities', []).each do |group_name| %>
    if ! uaac --zone "${UAA_ZONE_ID}" group get '<%= group_name %>' ; then
        status "- Group <%= group_name %> ..."
        uaac --zone "${UAA_ZONE_ID}" group add '<%= group_name %>'
        status "- Group <%= group_name %> /done"
    fi
<% end %>

status "Populating clients..."
<% p('uaa.clients', {}).sort.each do |client_id, client_data| %>
    status "- Client <%= client_id %> ..."
    if ! uaac --zone "${UAA_ZONE_ID}" client get '<%= client_id %>' ; then
        status "- Client <%= client_id %> adding ..."
        uaac --zone "${UAA_ZONE_ID}" client add '<%= client_id %>' \
            --no-interactive \
            <%
                %w(scope authorized-grant-types authorities access-token-validity refresh-token-validity redirect-uri secret).each do |key|
                    if client_data.key? key
                        %> --<%= key.tr('-', '_') %> '<%= client_data[key] %>' <%
                    end
                end
                if client_data.key? 'autoapprove'
                    if client_data['autoapprove'].eql? true
                        %> --autoapprove '<%= client_data['scope'] %>' <%
                    else
                        %> --autoapprove '<%= client_data['autoapprove'] %>' <%
                    end
                end
            %>
    fi
    if test -n '<%= client_data['secret'] %>' ; then
        status "- Client <%= client_id %> set secret"
        uaac --zone "${UAA_ZONE_ID}" secret set '<%= client_id %>' --secret '<%= client_data['secret'] %>'
        status "- Client <%= client_id %> /done"
    else
        status "- Client <%= client_id %> no secret, skipped"
    fi
<% end %>

status "Waiting for UAA zone to be available ..."
retry 240 30s curl ${SILENT} --connect-timeout 5 --fail <%= curl_ssl %> --header 'Accept: application/json' '<%= p("uaa.url") %>/info'

status "Logging in to %s" '<%= p("uaa.url") %>'
uaac target <%= uaac_ssl %> <%= p("uaa.url") %>
uaac token client get scf_auto_config --secret '<%= p("uaa.clients.scf_auto_config.secret") %>'

<% secret      = '/etc/secrets/cluster-admin-password'
   username    = properties.uaa.scim.users.first["name"].shellescape
   authorities = ENV['CLUSTER_ADMIN_AUTHORITIES'].split(',')
   if File.exist?(secret)
       password = File.read(secret).shellescape
   else
       password = ENV['CLUSTER_ADMIN_PASSWORD'].shellescape
   end
%>

if uaac user get <%= username %> ; then
    status "User %s already exists" <%= username %>
else
    status "Creating user %s" <%= username %>
    uaac user add <%= username %> \
        --given_name '' \
        --family_name '' \
        --emails <%= username %> \
        --password <%= password %>
fi

user_id=$(uaac user get <%= username %> | awk '/^  id:/ { print $2 }')

<% authorities.each do |authority| %>
    if uaac curl -k "/Users/${user_id}" | grep -A999 '{' | jq -r '.groups[].display' | grep --quiet '<%= authority %>' ; then
        status "User already in group %s, skipping" '<%= authority %>'
    else
        status "Adding users to authority %s" '<%= authority %>'
        if ! uaac group get '<%= authority %>' 2>/dev/null >/dev/null ; then
            uaac group add '<%= authority %>'
        fi
        if uaac group get '<%= authority %>' | grep -q '  displayname: <%= username %>' ; then
            status "User %s already in %s" <%= username %> '<%= authority %>'
        elif ! uaac group get '<%= authority %>' | grep -q "    value: ${user_id}" ; then
            uaac member add '<%= authority %>' <%= username %>
        fi
    fi
<% end %>

status "UAA initialization successful"
# We need to leave the initial user around, so that this script can be re-run :/
