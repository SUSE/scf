#!/bin/bash

# This script creates the initial user in HCP in the UAA zone if we are using
# one. This does not apply when we're using the default UAA zone (in which case
# we do it via properties.uaa.scim.users)
# We should only be in the default zone in Vagrant / AWS.  HCF deployed on HCP
# should always end up in the instance-specific zone.

set -o errexit -o nounset

# Report progress to the user; use as printf
status() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;32m" "$@" "\033[0m"
}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

export PATH="${PATH}:/var/vcap/packages/ruby-2.3/bin:/var/vcap/packages/cf-uaac/bin"
export GEM_HOME=/var/vcap/packages/cf-uaac/vendor/bundle/ruby/2.3.0/

# None of this requires access to outside the cluster - or even anything but UAA
# However, if HTTP_PROXY is set, uaac will ignore NO_PROXY and try to go through
# the proxy and everything falls over.  Work around this by unsetting all proxy-
# related environment variables.
unset HTTP_PROXY HTTPS_PROXY NO_PROXY http_proxy https_proxy no_proxy

<%
curl_ssl = properties.ssl.skip_cert_verify ? '--insecure' : ''
uaac_ssl = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
%>

if test -z "${HCP_INSTANCE_ID:-}" ; then
    # Running in vagrant / AWS, and managing our own UAA
    # We need to create the zone and populate it the way HCP would have done.

    UAA_ZONE_ID="hcf"

    status "Waiting for root UAA to be available..."
    retry 240 30s curl --fail <%= curl_ssl %> --header 'Accept: application/json' '<%= p("hcf.uaa.root-zone.url") %>/info'

    # We need to create the HCF zone manually
    status "Checking for UAA zone ${UAA_ZONE_ID}..."

    uaac target <%= uaac_ssl %> '<%= p("hcf.uaa.root-zone.url") %>'
    uaac token client get default_zone_admin --secret '<%= p("uaa.admin.client_secret") %>'

    if uaac curl <%= curl_ssl %> "/identity-zones/${UAA_ZONE_ID}" | grep --quiet '404 Not Found' ; then
        status "Creating UAA zone ${UAA_ZONE_ID}"
        uaac curl <%= curl_ssl %> -X POST /identity-zones -H 'Content-Type: application/json' -d '{
            "id": "'"${UAA_ZONE_ID}"'",
            "subdomain": "'"${UAA_ZONE_ID}"'",
            "name": "'"${UAA_ZONE_ID}"'"
        }'
    fi

    status "Creating groups..."
    <% p('hcf.uaa.authorities', []).each do |group_name| %>
        if ! uaac --zone "${UAA_ZONE_ID}" group get '<%= group_name %>' ; then
            uaac --zone "${UAA_ZONE_ID}" group add '<%= group_name %>'
        fi
    <% end %>

    status "Populating clients..."
    <% p('uaa.clients', {}).sort.each do |client_id, client_data| %>
        if ! uaac --zone "${UAA_ZONE_ID}" client get '<%= client_id %>' ; then
            uaac --zone "${UAA_ZONE_ID}" client add '<%= client_id %>' \
                --no-interactive \
                --name '<%= client_id %>' \
                <%
                    %w(scope authorized-grant-types authorities access-token-validity refresh-token-validity redirect-uri secret).each do |key|
                        if client_data.key? key
                            %> --<%= key.tr('-', '_') %> '<%= client_data[key] %>' <%
                        end
                    end
                    if client_data.key? 'autoapprove'
                        if client_data['autoapprove'].eql? true
                            %> --autoapprove '<%= client_data['scope'] %>' <%
                        else
                            %> --autoapprove '<%= client_data['autoapprove'] %>' <%
                        end
                    end
                %>
        fi
    <% end %>
else
    # Due to CAPS-969, our UAA clients are missing `autoapprove` and `redirect-uri` configs
    # We update them manually to work around the issue.
    status "Waiting for UAA zone to be availabile..."
    retry 240 30s curl --fail <%= curl_ssl %> --header 'Accept: application/json' '<%= p("hcf.uaa.internal-url") %>/info'

    status "Logging in to %s" '<%= p("hcf.uaa.internal-url") %>'
    uaac target <%= uaac_ssl %> <%= p("hcf.uaa.internal-url") %>
    uaac token client get uaa_create_first_user --secret '<%= p("uaa.clients.uaa_create_first_user.secret") %>'

    status "Fixing missing configs for clients..."
    <% p('uaa.clients', {}).sort.each do |client_id, client_data| %>
        <% next unless client_data['autoapprove'] || client_data['redirect-uri'] %>
        uaac client update '<%= client_id %>' \
            --no-interactive \
            <%
                if client_data.key? 'redirect-uri'
                    %> --redirect_uri '<%= client_data['redirect-uri'] %>' <%
                end
                if client_data.key? 'autoapprove'
                    if client_data['autoapprove'].eql? true
                        %> --autoapprove '<%= client_data['scope'] %>' <%
                    else
                        %> --autoapprove '<%= client_data['autoapprove'] %>' <%
                    end
                end
            %>
    <% end %>
fi


status "Waiting for UAA to be availabile..."
retry 240 30s curl --fail <%= curl_ssl %> --header 'Accept: application/json' '<%= p("hcf.uaa.internal-url") %>/info'

status "Logging in to %s" '<%= p("hcf.uaa.internal-url") %>'
uaac target <%= uaac_ssl %> <%= p("hcf.uaa.internal-url") %>
uaac token client get uaa_create_first_user --secret '<%= p("uaa.clients.uaa_create_first_user.secret") %>'

<% properties.uaa.scim.users.each do |user_info| %>

    <% username, password, authorities = user_info.split('|') %>
    <% authorities = authorities.split(',') %>

    if uaac user get '<%= username %>' ; then
        status "User %s already exists" '<%= username %>'
    else
        status "Creating user %s" '<%= username %>'
        uaac user add '<%= username %>' --given_name '' --family_name '' --emails '<%= username %>' --password '<%= password %>'
    fi

    user_id=$(uaac user get '<%= username %>' | awk '/^  id:/ { print $2 }')

    <% authorities.each do |authority| %>
        status "Adding users to authority %s" '<%= authority %>'
        if ! uaac group get '<%= authority %>' 2>/dev/null >/dev/null ; then
            uaac group add '<%= authority %>'
        fi
        if uaac group get '<%= authority %>' | grep -q '  displayname: <%= username %>' ; then
            status "User %s already in %s" '<%= username %>' '<%= authority %>'
            continue
        fi
        if ! uaac group get '<%= authority %>' | grep -q "    value: ${user_id}" ; then
            uaac member add '<%= authority %>' '<%= username %>'
        fi
    <% end %>

<% end %>

status "UAA initialization successful"
# We need to leave the initial user around, so that this script can be re-run :/
