#!/usr/bin/env bash

set -o errexit -o nounset

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
source "${GIT_ROOT}/make/include/defaults"
source "${GIT_ROOT}/make/include/has_namespace"

POD_NAME=$1

find_test() {
    local dir file
    for dir in output/kube kube/cf-opensuse ; do
        file="${dir}/bosh-task/${POD_NAME}.yaml"
        if [ -f "${file}" ] ; then
            echo "${file}"
            return 0
        fi
    done
    echo 1>&2 There is no bosh-task for "${POD_NAME}".
    exit 1
}

TEST_FILE="$(find_test)"
shift

case "${POD_NAME}" in
    acceptance-tests)
        UAA_COUNT=$(kubectl get sts --namespace "${UAA_NAMESPACE}" uaa -o jsonpath='{.status.replicas}')
        if [ ${UAA_COUNT} -gt 1 ]; then
            echo -e "\033[36mThe SSO lifecycle tests are known to fail with UAA in HA mode.\033[0m"
            echo -e "\033[36mMake you have disabled the tests with e.g. \033[32menv.CATS_SUITES=-sso\033[0m"
            echo ""
            echo "See https://github.com/cloudfoundry/cf-acceptance-tests/issues/328"
            echo ""
        fi
    ;;
esac

GIT_ROOT=${GIT_ROOT:-$(git -C "$(dirname "${0}")" rev-parse --show-toplevel)}
METRICS="${GIT_ROOT}/scf_metrics.csv"

has_pod() {
    kubectl get pod --output=name --namespace "${NAMESPACE}" "${POD_NAME}" >/dev/null 2>/dev/null
}

stampy "${METRICS}" "$0" "make-tests::${POD_NAME}" start

if has_namespace "${NAMESPACE}"; then
    :
else
    echo 1>&2 Namespace "${NAMESPACE}" is missing. SCF is not running.
    exit 1
fi

stampy "${METRICS}" "$0" "make-tests::${POD_NAME}::create" start

# Delete left-over pod/definition from previous runs, then create/run
kubectl delete --namespace="${NAMESPACE}" --filename="${TEST_FILE}" \
    2> /dev/null || /bin/true

echo "Waiting for pod ${POD_NAME} to be deleted..."
while has_pod ; do
    sleep 1
done

# Replace the fixed secret in the relevant task definition with the
# actual name as pulled from the cluster under test.

CONFIG=$(mktemp)
RELEASE="$(helm list --namespace "${NAMESPACE}" --short --max 1)"
ruby "${GIT_ROOT}/bin/kube_overrides.rb" "${RELEASE}" "${TEST_FILE}" "$@" > "${CONFIG}"

remove_test_config () { rm "${CONFIG}" ; }
trap remove_test_config EXIT

# Use apply - Creates anything on first run.
# On subsequent runs identical existing definitions are ignored.
# (Ex: cluster role bindings for tests)
kubectl apply --namespace="${NAMESPACE}" --filename="${CONFIG}" --force

stampy "${METRICS}" "$0" "make-tests::${POD_NAME}::create" end

i=0

while [ "$(kubectl get pod --namespace "${NAMESPACE}" "${POD_NAME}" -o jsonpath='{.status.phase}')" != "Running" ]
do
  i=$((i + 1))
  if [ ${i} -gt 30 ]
  then
    echo 1>&2 "${POD_NAME} container failed to reach Running state"
    exit 1
  fi
  sleep 5
done

stampy "${METRICS}" "$0" "make-tests::${POD_NAME}::log" end

# First show the logs accumulated so far, then stream further logs in
# a way which terminates when the pod (= testsuite) terminates.
kubectl logs   --namespace "${NAMESPACE}" "${POD_NAME}"
kubectl attach --namespace "${NAMESPACE}" "${POD_NAME}" -c "${POD_NAME}"

stampy "${METRICS}" "$0" "make-tests::${POD_NAME}::log" end
stampy "${METRICS}" "$0" "make-tests::${POD_NAME}" end

while [ -z "$(kubectl get pod --namespace "${NAMESPACE}" "${POD_NAME}" -o jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')" ]; do
    sleep 1
done
exit "$(kubectl get pod --namespace "${NAMESPACE}" "${POD_NAME}" -o jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')"
