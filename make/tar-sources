#!/usr/bin/env bash

set -o errexit -o nounset

DIRECTORY_BLACKLIST=".*-buildpack|cflinuxfs2|cflinuxfs3|sle12|sle15|opensuse42|opensuse15|busybox|golang.*"

GIT_ROOT=${GIT_ROOT:-$(git rev-parse --show-toplevel)}
BASEDIR="$FISSILE_WORK_DIR/compilation"

OUTPUTDIR="$GIT_ROOT/source-output"
SRC_DIR="$GIT_ROOT/src/"

pushd ${GIT_ROOT} > /dev/null
SRC_FILES=$(find . -type f \( -iname "*.MF" -o -iname "*.yml" \))
popd > /dev/null

TEMPLATE_FILE=$(cat <<EOF
#
# spec file for package ==PACKAGE_NAME==
#
# Copyright (c) 2019 SUSE LINUX Products GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself \(unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License\). An "Open Source License" is a
# license that conforms to the Open Source Definition \(Version 1.9\)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugzilla.suse.com/
#

Name:           ==PACKAGE_NAME==
Version:        ==PACKAGE_VERSION==
Release:        CAP
License:
Summary:
Url:
Group:
Source:
Patch:
BuildRequires:
PreReq:
Provides:
BuildRoot:      %{_tmppath}/%{name}-%{version}-build

%description

EOF
)

rm -rf "${OUTPUTDIR}"
mkdir -p "${OUTPUTDIR}"

pushd "${BASEDIR}" > /dev/null
for DIR in $(ls -d **/**/sources/var/vcap/source/* | egrep -v "$DIRECTORY_BLACKLIST" | xargs dirname)
do
  SOURCE_NAME=$(ls "${DIR}")
  SOURCE_SIZE=$(du -h "${DIR}" | tail -n1)
  RELEASE_HASH=$(echo "${DIR}" | cut -d/ -f2)

  # get first folder name for distinguish files later
  pushd "${GIT_ROOT}" > /dev/null
  STAGE=""
  MANIFEST_FILE=""
  for FILE in $SRC_FILES; do
    if grep -q -m1 -H "${RELEASE_HASH}" "${FILE}"; then
      MANIFEST_FILE=$FILE
      break
    fi
  done
  if [ -z "$MANIFEST_FILE" ]; then
    echo "############################### Failed to find package $RELEASE_HASH in $SRC_DIR"
    exit 1
  fi

  if echo $MANIFEST_FILE | grep -q ".MF"; then
  # Extract stage name from .MF files
STAGE=`ruby -ryaml -ruri <<EOF
manifest = YAML.load_file("$MANIFEST_FILE")
puts manifest["name"]
EOF
`
  else
  # Extract the stage from the path
  # E.g ./src/scf-release/.dev_builds/packages/acceptance-tests/index.yml
  # STAGE=scf-release
    STAGE=$(grep -m1 -H "${RELEASE_HASH}" "${MANIFEST_FILE}" 2>/dev/null | sed -e 's/\.\/src\/\([^/]*\)\/.*$/\1/g' -)
  fi

  if [ -z "$STAGE" ]; then
    echo "STAGE NOT FOUND"
    exit 1
  fi
  popd > /dev/null

  echo "Creating tar archive for $SOURCE_NAME (stage: ${STAGE} source size: $SOURCE_SIZE)"
  PACKAGE_FILE_NAME_BASE="$OUTPUTDIR/scf_${STAGE}_${SOURCE_NAME}" 
  tar czf "${PACKAGE_FILE_NAME_BASE}.tar.gz" "${DIR}"
  echo "$TEMPLATE_FILE" > "${PACKAGE_FILE_NAME_BASE}.spec"
  sed -i -- "s/==PACKAGE_NAME==/${STAGE} ${SOURCE_NAME}/g" "${PACKAGE_FILE_NAME_BASE}.spec"
  sed -i -- "s/==PACKAGE_VERSION==/${RELEASE_HASH}/g" "${PACKAGE_FILE_NAME_BASE}.spec"
done

popd > /dev/null
