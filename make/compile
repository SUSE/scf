#!/usr/bin/env bash

set -o errexit -o nounset

GIT_ROOT=${GIT_ROOT:-$(git rev-parse --show-toplevel)}

SCF_PACKAGE_COMPILATION_CACHE=${SCF_PACKAGE_COMPILATION_CACHE:-''}

# Return a list of desired packages with their versions, as in package/00000000
_get_package_version_list() {
    fissile show release | grep -v 'Dev release' | grep -F '(' | cut -d: -f1 | sort -u | while read package hash ; do
        hash=$(echo "${hash}" | tr -c -d 0-9a-f)
        echo "${package}/${hash}"
    done
}

get_package_version_list() {
    (
        _get_package_version_list
        cd src/uaa-fissile-release
        source .envrc
        _get_package_version_list
    ) | sort -u
}

_cache() {
    test -z "${SCF_PACKAGE_COMPILATION_CACHE}" && return

    for package_version in $(get_package_version_list) ; do
        package_hash="${package_version##*/}"
        archive="${SCF_PACKAGE_COMPILATION_CACHE}/${package_hash}.tar.xz"
        test -e "${archive}" && {
            # Don't recreate an archive that already exists
            echo "Found:   ${archive}"
            continue
        }
        test -d "${FISSILE_WORK_DIR}/compilation/${package_hash}/compiled" || {
            echo "Missing: ${package_hash}/compiled"
            continue
        }
        mkdir -p "$(dirname "${archive}")"
        echo "Creating ${archive}"
        ionice -c 3 nice tar cJf "${archive}" -C "${FISSILE_WORK_DIR}/compilation/${package_hash}/" compiled
    done

    echo "Cache saved to ${SCF_PACKAGE_COMPILATION_CACHE}"
}

cache() {
    _cache > "${FISSILE_WORK_DIR}/rsync.log" 2>&1 &
}

restore() {
    test -z "${SCF_PACKAGE_COMPILATION_CACHE}" && return
    test -d "${FISSILE_WORK_DIR}/compilation/" && return

    mkdir -p "${FISSILE_WORK_DIR}/compilation/"
    mkdir -p "${SCF_PACKAGE_COMPILATION_CACHE}"

    stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore start

    for package_version in $(get_package_version_list) ; do
        package_hash="${package_version##*/}"
        archive="${SCF_PACKAGE_COMPILATION_CACHE}/${package_hash}.tar.xz"
        if ! test -r "${archive}" -a -s "${archive}" ; then
            old_archive="${SCF_PACKAGE_COMPILATION_CACHE}/${package_version}/compiled.tar"
            if test -r "${old_archive}" -a -s "${old_archive}" ; then
                # Fall back to old-style archive until all the caches are reasonably full
                archive="${old_archive}"
            fi
        fi
        if ! test -r "${archive}" -a -s "${archive}" ; then
            echo "Missing:   ${archive}"
            continue
        fi
        echo "Extracting ${archive}"
        mkdir -p "${FISSILE_WORK_DIR}/compilation/${package_hash}"

        stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore::clear::$(basename ${archive}) start
        rm -rf "${FISSILE_WORK_DIR}/compilation/${package_hash}/compiled"
        stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore::clear::$(basename ${archive}) done

        stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore::extract::$(basename ${archive}) start
        tar xf "${archive}" -C "${FISSILE_WORK_DIR}/compilation/${package_hash}"
        stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore::extract::$(basename ${archive}) done
    done

    stampy ${GIT_ROOT}/scf_metrics.csv $0 make-compile::restore done

    echo "Compiled packages restored from ${SCF_PACKAGE_COMPILATION_CACHE}"
}

# Removes any compilation pieces that we don't need.
# This affects both cache on the host, and local cache

clean() {
    if test -z "$(echo "${SCF_PACKAGE_COMPILATION_CACHE}" | tr -d ./)" ; then
        echo "SCF_PACKAGE_COMPILATION_CACHE is empty; bailing to prevent wiping your disk" >&2
        exit 1
    fi
    test -d "${SCF_PACKAGE_COMPILATION_CACHE}/" || return
    existing_packages=""
    for path in "${SCF_PACKAGE_COMPILATION_CACHE}/"* ; do
        test -e "${path}" || continue  # in case expansion failed
        hash=$(basename "${path}")
        existing_packages="${existing_packages} ${hash}"
    done
    for wanted_package in $(get_package_version_list) ; do
        wanted_hash="${wanted_package##*/}"
        existing_packages=$(echo "${existing_packages}" | tr ' ' '\n' | grep -vF "${wanted_hash}.tar.xz")
    done
    for unneeded_package in ${existing_packages} ; do
        echo "Removing ${unneeded_package}"
        rm -rf "${SCF_PACKAGE_COMPILATION_CACHE}/${unneeded_package}"
    done

    # And now the local cache. Same as above, just baked into of fissile.
    fissile build cleancache
}

COMMAND=${1:-''}

case ${COMMAND} in
    restore)
        restore;;
    clean)
        clean;;
    cache)
        cache;;
    list)
        get_package_version_list;;
    *)
        restore

        echo Please allow a long time for mariadb to compile
        fissile build packages

        cache
        ;;
esac
