#!/usr/bin/env bash
set -o errexit -o nounset

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
cd "${GIT_ROOT}"

bin="${GIT_ROOT}/tooling/mb-chart-assessment"
workdir="${GIT_ROOT}/_work/mb-chart-assessment"

source "${GIT_ROOT}/make/include/colors"

stats() {
    t=$(cat "${workdir}/${1}-charts.csv" | wc -l)
    n=$(( $t - $eok - $efails ))
    echo 1>&2 "$(cyan "$1"):	$(green "${eok}") ok, $(red "${efails}") failed, $(yellow "${n}") non-starters, $(blue "${t}") total"
}

lastengine=""
tfails=0
tok=0
efails=0
eok=0
header=0

sort -r -k 2,5 \
     < "${workdir}/chart-results.csv" \
     > "${workdir}/chart-results-sorted.csv"

while read state engine enginev chartv
do
    # Reached new engine block, reset engine counters. After printing the statistics.
    if [ "${lastengine}" != "${engine}" ] ; then
	if [ -n "${lastengine}" ] ; then
	    stats "${lastengine}"
	fi
	lastengine="${engine}"
	eok=0
	efails=0
	header=1
    fi
    if [ $header -gt 0 ] ; then
	echo "${engine}:"
	header=0
    fi
    # Print all charts to stdout, as yaml. Count everything for statistics.
    case $state in
	_OK_)
	    tok=$(( $tok + 1 ))
	    eok=$(( $eok + 1 ))
	    #echo "  - appVersion: $enginev"
	    #echo "    version:    $chartv"
	    echo "  ${chartv}:"
	    echo "    works: true"
	    echo "    api: ${enginev}"
	;;
	FAIL)
	    tfails=$(( $tfails + 1 ))
	    efails=$(( $efails + 1 ))
	    echo "  ${chartv}:"
	    echo "    works: false"
	    echo "    api: ${enginev}"
	;;
    esac
done < "${workdir}/chart-results-sorted.csv"

stats "${lastengine}"

t=$(cat "${workdir}/"*-charts.csv | wc -l)
n=$(( $t - $tok - $tfails ))

echo 1>&2 ====================================================================
echo 1>&2 "$(cyan "Totals"):		$(green "${tok}") ok, $(red "${tfails}") failed, $(yellow "${n}") non-starters, $(blue "${t}") total"
