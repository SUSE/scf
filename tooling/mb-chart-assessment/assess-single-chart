#!/usr/bin/env bash
set -o errexit -o nounset

CF_NAMESPACE="${1}"	; shift
engine="${1}"		; shift
enginev="${1}"		; shift
chartv="${1}"		; shift
chartlocation="${1}"	; shift
CAP="${1}"		; shift

# General operation - Testing a single chart for a specific engine.
# a. Make a copy of the node-env application in the brain test resources.
# b. Place the chart index into the app, as `index.yaml`.
# c. For all but postgres further:
#    1. Pull the stable chart archive from the indicated location
#    2. Unpack, patch and repack the archive
#    3. Place the modified archive into the app
#    4. Edit the index.yaml to refer to new location of the archive.
# d. Target the cluster, and push the node-env application
# e. Run the brain test customized to run only a single test case,
#    specific to the minibroker engine, and configured to use the
#    node-env app as its helm chart repository.
# f. Capture test result
# g. Delete node-env application serving as helm repository

# Location .............................................................

: "${GIT_ROOT:=$(git rev-parse --show-toplevel)}"
cd "${GIT_ROOT}"

# Configuration ........................................................

TOP=$(pwd)
bin="${TOP}/tooling/mb-chart-assessment"
wrk="${TOP}/_work"
stem=kube-chart-index
rstem=dbe
master="${wrk}/${rstem}-charts-master-index.yaml"

stable=https://kubernetes-charts.storage.googleapis.com
index="${stable}/index.yaml"

# Setup ................................................................

source "${TOP}/make/include/colors"

LOG="${wrk}/${rstem}-${engine}/${enginev}-${chartv}.log"

sep() {
    >> "${LOG}" echo -e "\n....................................... $1\n"
}

rm -f "${LOG}"

echo -n '  -' $(blue "${engine}") $(blue "${enginev}"), chart $(blue "${chartv}") ...

case $engine in
    mariadb)	testcase=014_minibroker_mariadb_test	;;
    mongodb)	testcase=016_minibroker_mongodb_test	;;
    postgresql)	testcase=015_minibroker_postgres_test	;;
    redis)	testcase=012_minibroker_redis_test	;;
    *)		echo " $(magenta Skipping), $(red "no testcase known")"
		exit
		;;
esac

# ______________________________________________________________________
# 3.a, 3.b, 3.c
#
# sep 'cluster starting ...'
# echo -n ' cluster setup ...'
# (
#     make/uaa/run;
#     make/wait uaa;
#     make/run --set "env.SCF_LOG_HOST=log-fake.cf.svc.cluster.local" "$@";
#     make/wait cf;

# ) >> "${LOG}" 2>&1
# echo -n "$(left 12)$(eeol)$(green up),"

# ______________________________________________________________________
# 3.d, 3.e
#
sep 'helm repo setup ...'
echo -n ' helm repo starting ...'
HREPOS="$("${bin}/local-chart-repository" start \
		"${LOG}" "${TOP}" "${wrk}" "${CF_NAMESPACE}" \
		"${wrk}/${rstem}-${engine}/${enginev}-${chartv}.yaml" \
		"${engine}" "${chartlocation}" "${CAP}" || true)"

if [ "${HREPOS}" == "" ]
then
    echo "$(left 12)$(eeol)$(red "start failed"), likely a patch failure"
    exit 1
fi

echo -n "$(left 12)$(eeol)$(green up),"

# ______________________________________________________________________
# 3.f, 3.g
# We force the test to use the custom helm repository we prepared and
# started in 3.d, 3.e.
sep 'testing ...'
echo -n ' testing ...'
if make/tests acceptance-tests-brain \
	      "env.INCLUDE=${testcase}" \
	      "env.KUBERNETES_REPO=${HREPOS}" \
	      "env.VERBOSE=true" \
	      >> "${LOG}" 2>&1
then
    echo -n "$(left 3)$(eeol)$(green OK)"
    echo _OK_ "${engine}" "${enginev}" "${chartv}" >> "${wrk}/${rstem}-chart-results.csv"
else
    echo -n "$(left 3)$(eeol)$(red FAIL)"
    echo FAIL "${engine}" "${enginev}" "${chartv}" >> "${wrk}/${rstem}-chart-results.csv"
fi

# ______________________________________________________________________
sep 'post assessment service & broker state ...'
(
    cf marketplace || true
    cf service-brokers || true

    # A failed chart can leave orphans behind (failed to delete service instance, failed to delete broker).
    # Without fixing this all future trials will also fail, using the wrong broker.
    # We purge the service itself first, after that we can cleanup the broker as well.

    if cf service-brokers | grep minibroker
    then
	cf purge-service-offering -f "${engine}"
	cf delete-service-broker -f "$(cf service-brokers | grep minibroker | awk '{print $1}')"
    fi
) >> "${LOG}" 2>&1

# ______________________________________________________________________
#
sep 'helm repo teardown ...'
echo -n ' helm repo stopping ...'
(
    "${bin}/local-chart-repository" stop
) >> "${LOG}" 2>&1
echo -n "$(left 12)$(eeol)$(blue down),"

# ______________________________________________________________________
# 3.h
#
# sep 'cluster teardown ...'
# echo -n ' cluster stopping ...'
# (
#     helm delete --purge uaa;
#     helm delete --purge cf;
#     k delete namespace uaa & k delete namespace cf
#     make/wait-stop cf;
#     make/wait-stop uaa;
# ) >> "${LOG}" 2>&1
# echo -n "$(left 12)$(eeol)$(blue down),"

echo ' done'
sleep 10
