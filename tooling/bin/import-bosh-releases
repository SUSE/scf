#!/usr/bin/env ruby

# This script updates the role manifest to use BOSH releases from a newer
# cf-deployment manifest.

# Note that while we overwrite the existing role manifest, it should *not* be
# checked in as-is; running this script will drop all the comments in the file.

require 'open-uri'
require 'rubygems'
require 'yaml'
require_relative '../lib/manifest'
require_relative '../lib/yaml-refinements'

using YAMLRefine

MANIFEST_RELPATH = '../../container-host-files/etc/scf/config/role-manifest.yml'

# Load the upstream manifest, as a Ruby object
def load_upstream_manifest(target_version)
    if target_version.nil?
        STDERR.puts "Usage: #{$0} <cf-deployment tag>"
        STDERR.puts "    e.g. #{$0} 6.0.0"
        exit 1
    end
    Manifest.load_from_upstream version:target_version
end

# Load the role manifest, as a YAML document (not a Ruby object)
def load_role_manifest
    path = File.join(File.dirname($0), MANIFEST_RELPATH)
    role_manifest = YAML.parse_file path
    fail "Role manifest does not have a top level mapping" unless role_manifest.children.first.is_a? Psych::Nodes::Mapping
    role_manifest
end

# Update the role manifest (releases only) given an upstream manifest
def patch_role_manifest(role_manifest:, upstream_manifest:)
    upstream_manifest['releases'].each do |release|
        patch_release role_manifest,
            name: release['name'], url: release['url'],
            version: release['version'], sha1: release['sha1']
    end
end

# Given a role manifest, find the given BOSH release (mapping)
def find_release(role_manifest:, release_name:)
    role_manifest.root['releases'].children.find do |release|
        release['name'].value == release_name
    end
end

# Update the release information for a given release
def patch_release(role_manifest, name:, url:, version:, sha1:)
    release = find_release(role_manifest: role_manifest, release_name: name)
    if release.nil?
        STDERR.puts "Skipping new release: \e[0;32m#{name}\e[0m"
        return
    end
    old_version = Gem::Version.new(release['version'].value)
    new_version = Gem::Version.new(version)
    if new_version < old_version
        STDERR.puts "Skipping downgrade of \e[0;32m#{name}\e[0m from \e[0;1;31m#{release['version'].value}\e[0m to \e[0;1;31m#{version}\e[0m"
        return
    end
    release['name'] = name
    release['url'] = url
    release['version'] = version
    release['sha1'] = sha1
end

def write_role_manifest(role_manifest)
    path = File.join(File.dirname($0), MANIFEST_RELPATH)
    File.open(path, 'w') do |f|
        stream = Psych::Nodes::Stream.new
        stream.children << role_manifest
        f.write stream.to_yaml
    end
end

role_manifest = load_role_manifest
upstream_manifest = load_upstream_manifest(ARGV.first)
patch_role_manifest role_manifest: role_manifest, upstream_manifest: upstream_manifest
write_role_manifest role_manifest

puts "Please remember to update `\e[0;33mbin/common/versions.sh\e[0m`"
